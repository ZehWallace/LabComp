class A {
   public void first (int pn) {
   }
}
class B extends A {
   public void second () {
   }
}
class C extends B {
   public void third () {
   }
}
class Program {
   public void run () {
      A a;
      
      B b;
      
      C c;
      
      a = new A();
      b = new B();
      c = new C();
      a.first(0);
      
      b.first(0);
      
      c.first(0);
      
      b.second();
      
      c.second();
      
      c.third();
      
      a = b;
      a = c;
      b = c;
   }
}
#include <malloc.h>
#include <stdlib.h>
#include <stdio.h>
/* define o tipo boolean */
typedef int boolean;
#define true 1
#define false 0
/* define um tipo Func que ´e um ponteiro para fun¸c~ao */ 
typedef void (*Func)();
typedef struct _ST_A {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_A
void A_first(int pn){
}
// apenas os métodos públicos
Func VTclass_A[] = { 
   (void (*) () ) _A_first,
};

_class_A *new_A(){
   _class_A *t;
   if((t = malloc(sizeof(_class_A)))!=NULL)
      t->vt = VTclass_A;
   return t;
}

typedef struct _ST_B {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_B
void B_second(){
}
// apenas os métodos públicos
Func VTclass_B[] = { 
   (void (*) () ) _A_first,
   (void (*) () ) _B_second,
};

_class_B *new_B(){
   _class_B *t;
   if((t = malloc(sizeof(_class_B)))!=NULL)
      t->vt = VTclass_B;
   return t;
}

typedef struct _ST_C {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_C
void C_third(){
}
// apenas os métodos públicos
Func VTclass_C[] = { 
   (void (*) () ) _A_first,
   (void (*) () ) _B_second,
   (void (*) () ) _C_third,
};

_class_C *new_C(){
   _class_C *t;
   if((t = malloc(sizeof(_class_C)))!=NULL)
      t->vt = VTclass_C;
   return t;
}

typedef struct _ST_Program {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_Program
void Program_run(){
   A a;
   
   B b;
   
   C c;
   
   a = new_A();
   b = new_B();
   c = new_C();
   a.first(0);
   
   b.first(0);
   
   c.first(0);
   
   b.second();
   
   c.second();
   
   c.third();
   
   a = b;
   a = c;
   b = c;
}
// apenas os métodos públicos
Func VTclass_Program[] = { 
   (void (*) () ) _Program_run,
};

_class_Program *new_Program(){
   _class_Program *t;
   if((t = malloc(sizeof(_class_Program)))!=NULL)
      t->vt = VTclass_Program;
   return t;
}

