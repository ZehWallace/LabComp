class A {
   static private int n;
   private int n;
   static public int get () {
      return A.n;
   }
   public int get () {
      return this.n;
   }
   static public void set (int n) {
      A.n = n;
   }
   public void set (int n) {
      this.n = n;
   }
}
class Program {
   public void run () {
      A a;
      
      a = new A();
      a.set(0);
      
      write (a.get());
      A.set(1);
      
      write (A.get());
   }
}
#include <malloc.h>
#include <stdlib.h>
#include <stdio.h>
/* define o tipo boolean */
typedef int boolean;
#define true 1
#define false 0
/* define um tipo Func que ´e um ponteiro para fun¸c~ao */ 
typedef void (*Func)();
typedef struct _ST_A {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
   int n;
}_class_A
int _static_A_n;
int _static_A_get(){
   return n;
}
int A_get(){
   return n;
}
void _static_A_set(int n){
   n = n;
}
void A_set(int n){
   n = n;
}
// apenas os métodos públicos
Func VTclass_A[] = { 
   (void (*) () ) _A_get,
   (void (*) () ) _A_get,
   (void (*) () ) _A_set,
   (void (*) () ) _A_set,
};

_class_A *new_A(){
   _class_A *t;
   if((t = malloc(sizeof(_class_A)))!=NULL)
      t->vt = VTclass_A;
   return t;
}

typedef struct _ST_Program {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_Program
void Program_run(){
   A a;
   
   a = new_A();
   a.set(0);
   
   printf ("%d", a.get());
   A.set(1);
   
   printf ("%d", A.get());
}
// apenas os métodos públicos
Func VTclass_Program[] = { 
   (void (*) () ) _Program_run,
};

_class_Program *new_Program(){
   _class_Program *t;
   if((t = malloc(sizeof(_class_Program)))!=NULL)
      t->vt = VTclass_Program;
   return t;
}

