class A {
   public int m1 (boolean ok) {
      return 0;
   }
   public void m2 () {
   }
   final public String m3 (String s, boolean ok) {
      return "A";
   }
   public String m4 (int i, boolean ok) {
      return "Am4";
   }
}
class B {
   public int m1 (boolean ok) {
      return 1;
   }
   final public void m2 () {
   }
   final public int mB () {
      return 1;
   }
}
class C {
   public int m1 (boolean ok) {
      return 2;
   }
   final public String m4 (int i, boolean ok) {
      return "C";
   }
   final public String m5 () {
      return "finally";
   }
}
final class D {
}
final class E {
   public int m1 (boolean ok) {
      return 5;
   }
   public void m2 () {
   }
   public String m4 (int i, boolean ok) {
      return "Em4";
   }
}
class Program {
   public void run () {
      C c;
      
      c = new C();
      write (c.m1(true));
      c.m2();
      
      write (c.m3("ok", false));
      write (c.m4(0, false));
      write (c.m5());
      write (c.mB() + 1);
      B b;
      
      b = new B();
      write (b.m1(true));
      b.m2();
      
      write (b.m3("ok", false));
      write (b.m4(0, false));
      write (c.mB() + 1);
      A a;
      
      a = new A();
      write (a.m1(true));
      a.m2();
      
      write (a.m3("ok", false));
      write (a.m4(0, false));
      D d;
      
      d = new D();
      write (d.m1(true));
      d.m2();
      
      write (d.m3("ok", false));
      write (d.m4(0, false));
      E e;
      
      e = new E();
      write (e.m1(true));
      e.m2();
      
      write (e.m3("ok", false));
      write (e.m4(0, false));
   }
}
#include <malloc.h>
#include <stdlib.h>
#include <stdio.h>
/* define o tipo boolean */
typedef int boolean;
#define true 1
#define false 0
/* define um tipo Func que ´e um ponteiro para fun¸c~ao */ 
typedef void (*Func)();
typedef struct _ST_A {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_A
int A_m1(int ok){
   return    0;
}
void A_m2(){
}
char * A_m3(char * s, int ok){
   return A;
}
char * A_m4(int i, int ok){
   return Am4;
}
typedef struct _ST_B {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_B
int B_m1(int ok){
   return    1;
}
void B_m2(){
}
int B_mB(){
   return    1;
}
typedef struct _ST_C {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_C
int C_m1(int ok){
   return    2;
}
char * C_m4(int i, int ok){
   return C;
}
char * C_m5(){
   return finally;
}
typedef struct _ST_D {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_D
typedef struct _ST_E {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_E
int E_m1(int ok){
   return    5;
}
void E_m2(){
}
char * E_m4(int i, int ok){
   return Em4;
}
typedef struct _ST_Program {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_Program
void Program_run(){
   C c;
   
   c = C;
   printf ("%d", );
   ;
   
   printf ("%s", );
   printf ("%s", );
   printf ("%s", );
   printf ("%d",  +    1);
   B b;
   
   b = B;
   printf ("%d", );
   ;
   
   printf ("%s", );
   printf ("%s", );
   printf ("%d",  +    1);
   A a;
   
   a = A;
   printf ("%d", );
   ;
   
   printf ("%s", );
   printf ("%s", );
   D d;
   
   d = D;
   printf ("%d", );
   ;
   
   printf ("%s", );
   printf ("%s", );
   E e;
   
   e = E;
   printf ("%d", );
   ;
   
   printf ("%s", );
   printf ("%s", );
}
