class A {
   static private int n;
   static public int get (int n) {
      return A.n;
   }
   static public boolean set (boolean ok, int n) {
      A.n = n;
      return true;
   }
}
class B {
   static private int n;
   static public int get (int n) {
      return B.n + n;
   }
   static public boolean set (boolean ok, int n) {
      B.n = n;
      return !ok;
   }
}
class Program {
   public void run () {
      boolean batata;
      
      A a;
      
      a = new A();
      if (B.set(false, 0)){
         batata = A.set(true, 0);
      }
      write (B.get(1));
   }
}
#include <malloc.h>
#include <stdlib.h>
#include <stdio.h>
/* define o tipo boolean */
typedef int boolean;
#define true 1
#define false 0
/* define um tipo Func que ´e um ponteiro para fun¸c~ao */ 
typedef void (*Func)();
typedef struct _ST_A {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_A
int _static_A_n;
int _static_A_get(int n){
   return n;
}
int _static_A_set(int ok, int n){
   n = n;
   return 1;
}
typedef struct _ST_B {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_B
int _static_B_n;
int _static_B_get(int n){
   return (n) + (n);
}
int _static_B_set(int ok, int n){
   n = n;
   return !ok;
}
typedef struct _ST_Program {
   /* ponteiro para um vetor de métodos da classe */
   Func *vt; 
}_class_Program
void Program_run(){
   int batata;
   
   A a;
   
   a = A;
   if (){
      batata = ;
   }
   printf ("%d", );
}
